From 597014ba5ca258763e96ee37729ac933c5af1602 Mon Sep 17 00:00:00 2001
From: Kevin Schlosser <drschlosser@hotmail.com>
Date: Sat, 3 Feb 2018 00:40:05 -0700
Subject: [PATCH] Fixes compatibility issues with pyasn1 >= 0.4.1

This is a multipart Problem.

Part 1. Is the year of the certificates. You have provided a solution for this. I have altered this solution because of the second part.

Part 2. There is a traceback the occurs when the TLS certificate is checked.

    pyasn1.error.PyAsn1Error: <TagSet object at 0x7f53f5fb74e0 tags 0:32:16> not in asn1Spec: <OctetString schema object at 0x7f53f5f51d68 tagSet <TagSet object at 0x7f540c3cef28 tags 0:0:4> encoding iso-8859-1>

This traceback has been reported to the maker(s) of pyasn1.

https://github.com/etingof/pyasn1/issues/112

This issue was closed with a half explained solution. I have instituted this solution into the sleekxmpp library.

I added version checking of the pyasn1 module because of this the checking of the date instances is not needed (Or at least I do not think it is) If the pyasn1 version is >= 0.4.1 then a flag is set to use the alternate means of grabbing the needed certificate information.
---
 sleekxmpp/xmlstream/cert.py | 38 +++++++++++++++++++++++++++++++------
 1 file changed, 32 insertions(+), 6 deletions(-)

diff --git a/sleekxmpp/xmlstream/cert.py b/sleekxmpp/xmlstream/cert.py
index ae82cac8..7d822d88 100644
--- a/sleekxmpp/xmlstream/cert.py
+++ b/sleekxmpp/xmlstream/cert.py
@@ -5,8 +5,23 @@
 # prevent thread safety issues.
 datetime.strptime('1970-01-01 12:00:00', "%Y-%m-%d %H:%M:%S")
 
+try:
+    from packaging import version
+
+    def check_version(ver1, ver2):
+        return version.parse(ver1) <= version.parse(ver2)
+
+except ImportError:
+    from distutils.version import LooseVersion, StrictVersion
+
+    def check_version(ver1, ver2):
+        try:
+            return StrictVersion(ver1) <= StrictVersion(ver2)
+        except ValueError:
+            return LooseVersion(ver1) <= LooseVersion(ver1)
 
 try:
+    from pyasn1 import __version__ as pyasn1_version
     from pyasn1.codec.der import decoder, encoder
     from pyasn1.type.univ import Any, ObjectIdentifier, OctetString
     from pyasn1.type.char import BMPString, IA5String, UTF8String
@@ -19,11 +34,11 @@
 
     XMPP_ADDR = ObjectIdentifier('1.3.6.1.5.5.7.8.5')
     SRV_NAME = ObjectIdentifier('1.3.6.1.5.5.7.8.7')
-
     HAVE_PYASN1 = True
+    HAVE_PYASN1_4 = check_version('0.4.1', pyasn1_version)
 except ImportError:
     HAVE_PYASN1 = False
-
+    HAVE_PYASN1_4 = False
 
 log = logging.getLogger(__name__)
 
@@ -69,8 +84,14 @@ def extract_names(raw_cert):
         if oid != SUBJECT_ALT_NAME:
             continue
 
-        value = decoder.decode(extension.getComponentByName('extnValue'),
-                               asn1Spec=OctetString())[0]
+        if HAVE_PYASN1_4:
+            value = extension.getComponentByName('extnValue')
+        else:
+            value = decoder.decode(
+                extension.getComponentByName('extnValue'),
+                asn1Spec=OctetString()
+            )[0]
+
         sa_names = decoder.decode(value, asn1Spec=SubjectAltName())[0]
         for name in sa_names:
             name_type = name.getName()
@@ -108,11 +129,16 @@ def extract_dates(raw_cert):
 
     not_before = validity.getComponentByName('notBefore')
     not_before = str(not_before.getComponent())
-    not_before = datetime.strptime(not_before, '%Y%m%d%H%M%SZ')
 
     not_after = validity.getComponentByName('notAfter')
     not_after = str(not_after.getComponent())
-    not_after = datetime.strptime(not_after, '%Y%m%d%H%M%SZ')
+
+    if HAVE_PYASN1_4:
+        not_before = datetime.strptime(not_before, '%y%m%d%H%M%SZ')
+        not_after = datetime.strptime(not_after, '%y%m%d%H%M%SZ')
+    else:
+        not_before = datetime.strptime(not_before, '%Y%m%d%H%M%SZ')
+        not_after = datetime.strptime(not_after, '%Y%m%d%H%M%SZ')
 
     return not_before, not_after
 
